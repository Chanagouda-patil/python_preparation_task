# I. Introduction:
"""
# 1. Tell me about python.
Ans :
a. Python is a widely used general-purpose, high level programming language. It was created by Guido van Rossum in 1991
 and further developed by the Python Software Foundation.
b. Python is an interpreted, interactive and object-oriented scripting language.
c. Python is designed to be highly readable. It uses English keywords frequently whereas other languages use
   punctuation, and it has fewer syntactical constructions than other languages.

# 2. Why Python is so popular nowadays?
Ans :
	- Now days Python is the most popular language because of Python can handle huge amount of data. Comparing with
	  other languages mostly Python will be used in data processing. And now the present trending technologies
	  Machine Learning, Artificial Intelligence and Data Science will mostly use Python language because of comparing
	  with the other languages Python can handle the huge data. That’s why in the past 10years Python is the most
	  popular language.

# 3. Features of Python
Ans :
     1.easy to learn
     2.easy to read
     3.easy to maintaince
     4.abroad standard library
     5.interactive mode
     6.portable
     7.python is interpreted
     8.python is object-oriented

# 4. Advantages and Disadvantages of Python.
Ans :
     - Advantages of python

     1.It is easy to learn and use,and it has an extensive library.
     2.Python increases productivity.
     3.It is very flexible.
     4.It has a very supportive community.

     - Disadvantages of python

     1.Because of its elementary programming, users face difficulty while working with other programming languages.
     2.Python is a time-consuming language. It has a low execution speed.
     3.There are many issues with the design of  the language, which only gets displayed during runtime.
     4.It is not suited for memory-intensive programs and mobile applications.

# 5. Interpreted vs Compiled time programming languages. Explain in detail
Ans :
    - Compiled Languages
    * Compiled languages are converted directly into machine code that the processor can execute. As a result,
      they tend to be faster and more efficient to execute             than  interpreted languages.
    * They also give the developer more control over hardware aspects, like memory management and CPU usage.
    * Compiled languages need a “build” step – they need to be manually compiled first.
    * Examples of pure compiled languages are C, C++, Erlang, Haskell, Rust, and Go.

    - Interpreted Languages.
    * Interpreters run through a program line by line and execute each command.
    * Interpreted languages were once significantly slower than compiled languages.
    * Examples of common interpreted languages are PHP, Ruby, Python, and JavaScript.

# 6. .py vs .pyc files
Ans :
    - .py :
    * Files with .py extension are Python source files, the files in which you write your Python code.
    * Before being executed, the code in the .py files is compiled into .pyc files.

    - .pyc :
    * .pyc are generated by compiling .py files, and then they are interpreted.
    * .pyc file contains bytecode.

# 7. How compilation will happen internally. Explain in detail
Ans :
    - “Programmers write programs in a form called source code. Source code must go through several steps before it
       becomes an executable program. The first step is to pass the source code through a compiler, which translates
       the high-level language instructions into object code. The linker combines modules and gives real values to all
       symbolic addresses, thereby producing machine code.”
    -  When executing (running), the compiler first parses (or analyzes) all the language statements syntactically one
       after the other and then, in one or successive stages or “passes”, builds the output code, making sure that
       statements that refer to other statements are referred to correctly in the final code. Traditionally, the output
       of the compilation has been called object code or sometimes an object module. The object code is machine code
       that the processor can execute one instruction at a time.

# 8. Why Python is Dynamically typed programming Language. Explain
Ans :
     - We don't have to declare the type of variable while assigning a value to a variable in Python. Other languages
       like C, C++, Java, etc.., there is a strict declaration of variables before assigning values to them. It states
       the kind of variable in the runtime of the program. So, Python is a dynamically typed language

# 9. Python is Platform independent.Explain
Ans :
    - Platform independence describes a technology that can be implemented on one machine and used on another
      without any changes.

# 10.Different ways to write python program.
   Interactive, IDLE, CommandPrompt, IDE
   Advantages, Disadvantages
Ans :
     * Interactive / CommandPrompt : An interactive mode allows us to execute one statement at a time. Let's say we
       have to calculate the product of two numbers. We can directly enter the expression in the interactive shell.
     * IDLE : IDLE is default IDE for Python, and it has both interactive and script modes to work with Python.
     * IDE  : IDE [Integrated Development Environment] is a software application that generally has a source code
       editor, builds automation tools, and a debugger.

     Advantages :
     - Using IDE saves a lot of time for the developers. Let's see some benefits of using an IDE.

    * Firstly, they do Faster code compared to other normal text-editors. IDE autocompletes the syntax for us.
    * Secondly, they help in managing the projects. We bundle everything necessary for the project.
    * Thirdly, they provide debugging tools for correcting the code.
    * Finally, IDE(e.g., PyCharm) prompts us to follow the PEP8 - Python's style guide.
"""
"""
II. Variables:
===============
1. x = 10. Explain in detail for CRUD operations
    •	x = 10 (Create Operation).
    •	Print(x) (Retrieve/Read Operation)
    •	x = 20 (Update Operation)
    •	del(x) (Delete Operation)

2. tokens in Python. Explain all types
Ans : 
    - Tokens are building blocks of a language. They are the smallest individual unit of a program. 
      There are five types of tokens in Python.
   
    1.Keywords : 
    - Keywords are the pre-defined set of words in a language that perform their specific function. 
    - You cannot assign a new value or task to them other than the predefined one.
    - You cannot use them as a variable, class, function, object or any other identifier.
    - For example: if, elif, while, True, False, None, break etc
    - These have their special task that you cannot change. For example break will only end the loop you cannot make
      it start the loop.

    2.Identifiers :
    - Now identifiers are the names that you can assign a value to. 
    - An identifier can be anything for example,a = 10
    - Here, a is a valid identifier name. Any name you give your variable, function, or class is an identifier of that
      particular thing.
    - Now there are certain rules  that  you have to follow to define a valid identifier name.
    Rules :
    * A valid identifier name can have letters, digits, and underscore sign.
    * It can start with an alphabet or underscore but can never start with a digit.
    * It can never be a keyword name.
    * An identifier name can be of variable length.
    * The only special symbol that can be used in identifier name is underscore( _ ).
    * One more thing that you should remember that python is case sensitive.
    * Examples of valid identifier names include: a, _a, a12, etc
    * Examples of invalid identifier names include: 1a, $a, elif, print.

    3.Literals : 
    - Literals are the fixed or constant values. They can either be string, numeric or boolean.
    - For example, anything within single or double quotes is classified as a string and is literal because it is a 
      fixed value i.e, “Coding Ground” is literal because it is a string.
    - Another example is, 10. It is a simple number but is a fixed value. It is constant and it will remain constant. 
      You can perform operations like addition or subtraction but the value of these two characters 1 and 0 put together
      in a correct order gives them a value equal to ten and that cannot be changed.

    - Boolean only consist of 2 values, True and False. Remember that “T” of True is capital. 
    - Python is case sensitive and if you write True with small “t” like true it will hold a different meaning. 
      It will act as another variable.
    
    4.Punctuators or Separators :

    - Punctuators, also known as separators give a structure to code. They are [mostly] used to define blocks in a 
      program. 
    - Some examples of punctuators include
      single quotes – ‘ ‘ , double quote – ” ” , parenthesis – ( ), brackets – [ ], Braces – { },
      colon – ( : ) , comma ( , ), etc.
    - Punctuators and operators go hand in hand are used everywhere. 
      For example,name = "coding ground"

    5. Operators :
    -  Operators are the symbols which are used to perform operations between operands.

     * Unary Operators: Operators having single operand.
        Eg. +8, -7, etc
     * Binary Operators: Operators working on 2 operands.
        Eg. 2+2, 4-3, 8*9, etc
     * Similarly, there are Ternary Operators that work on 3 operands and so on.

3. Garbage collection. How it works internally
Ans : 
    - Python schedules garbage collection based upon a threshold of object allocations and object de-allocations. 
      When the number of allocations minus the number of de-allocations is greater than the threshold number, the 
      garbage collector is run.
      
4. Memory Management in Python
Ans : 
    - memory allocation can be defined as allocating a block of space in the computer memory to a program.
    - In python memory allocation and de-allocation method is automatic as the python developers created a garbage 
      collection for python so that the user does not have to do manual garbage collection.
 
5. Initializing variable, static,dynamic way 
Ans : Static variables are initialized only once. Dynamic variables are initializing at run time.
6. Assigning value to multiple variables. Explain 
Ans : •	When we are assigning value to the multiple variables at a time, the variables can first initialized from RHS 
        to LHS. 
        •	For Ex: x = y = z = 10 
            Here first 10 value assigned to the z and after y value is equals to z that’s y automatically z value 
            treated as y value and after the same operation will be done to the x variable. And the output is x = 10, 
            y = 10, z =10.
        •	Here one more example: (x, y, z) = (10, 20, 30)
            Here also same the initialization process will be started from RHS to LHS. And the first variable is 
            value is equals to first value and the second variable equals to second position value and third variable equals to third value. The output is x=10, y=20, z=30.


III. IDE PyCharm:
===================
1. Different IDEs in market.
Ans : 
     - An IDE (or Integrated Development Environment) is a program dedicated to software development. As the name
       implies, IDEs integrate several tools specifically designed for software development.
       These tools usually include:
       - An editor designed to handle code (with, for example, syntax highlighting and auto-completion)
       - Build, execution, and debugging tools
       - Some form of source control
       Python-Specific Editors and IDEs
        - PyCharm
        - Spyder
        - Thonny
       General Editors and IDEs with Python Support
        - Eclipse + PyDev
        - Sublime Text
        - Atom
        - GNU Emacs
        - Vi / Vim
        - Visual Studio
        - Visual Studio Code
2. Advantages of IDE
Ans : 
    - Using an IDE will save you a lot of effort in writing a program. Some advantages include:
        
        1. Less time and effort: The entire purpose of an IDE is to make developing faster and easier. Its tools and
           features are supposed to help you organize resources, prevent mistakes, and provide shortcuts.
        
        2. Enforce project or company standards: Simply by working in the same development environment, a group of 
           programmers will adhere to a standard way of doing things. Standards can be further enforced if the IDE
           offers predefined templates, or if code libraries are shared between different team members/teams
           working on the same project.
        
        3. Project management: This can be twofold. First, many IDEs have documentation tools that either automate 
           the entry of developer comments, or may actually force developers to write comments in different areas. 
           Second, simply by having a visual presentation of resources, it should be a lot easier to know how an 
           application is laid out as opposed to traversing the file system for arcane files in the file system.
           
3. Shortcuts in PyCharm (Explain min 10)
Ans : 
    - PyCharm is one of the most widely used IDEs for Python programming language, developed by JetBrain.
    - Some shortcuts in Pycharm are : 
        - ctrl + a : Select all the text inside your file
        - Alt + up/down : jump from a function to another
        - ctrl + e : Shows you the recent visited files
        - ctrl + d : ctrl + c & ctrl + v => ctrl + d is like a combination of both or to be more exact is a way to
                     duplicate your text
        - ctrl + f : It will open a search bar to look for a specific work/sentence in your file, you can also select
                     the expression that you want to look for and then press ctrl + f it will put it automatically
                     in the search bar
        - ctrl + shift + f : It does the same thing as ctrl + f but it will give you more searching options : 
                             specify the directory to look in, possibility to choose the type of files to check
                             (*.py, *.xml …), Match case …etc
        - ctrl + shift + up/down or Alt+ shift + up/down : It helps you move efficiently your selected lines to
                             another place.
        - ctrl + a then ctrl + alt + i : This is a good shortcut that help organize/auto-indent your code.
        - Ctrl + a → Ctrl + Alt + L : It helps formatting your code based on the suggested code style (PEP8)
        - Alt + Enter : Import the missing packages.
        - ctrl + Alt + O : Optimizes your imported packages, remove the unused ones.
        - ctrl + k : Quick way to open the window to commit your changes when you are using Version Control System (VCS)



IV. Operators:
===============
1. Explain in detail about all operators.
Ans : 
    - Python operator is a symbol that performs an operation on one or more operands.
      An operand is a variable or a value on which we perform the operation.
    - There are 7 types of operators are available in pytho:
      1. Arithmetic operator
      2. Assignment operator
      3. Relational operator
      4. Bitwise operator
      5. Logical operator
      6. Membership operator
      7. Identity operator
      
    - Arithmetic operator : The Python programming language provides arithmetic operators that perform 
      addition, subtraction, multiplication, and division. It works the same as basic mathematics.
      a. Addition(+) : Adds the values on either side of the operator.
      b. Subtraction(-) : Subtracts the value on the right from the one on the left.
      c. Multiplication(*) : Multiplies the values on either side of the operator.
      d. Division(/) : Divides the value on the left by the one on the right. Notice that division results in a 
                       floating-point value.
      e. Exponentiation(**) : Raises the first number to the power of the second.
      f. Floor Division(//) : Divides and returns the integer value of the quotient. It dumps the digits after 
                              the decimal.
      g. Modulus(%) : Divides and returns the value of the remainder.
      
    - Relational operator : Relational Python Operator carries out the comparison between operands. They tell us whether
                          an operand is greater than the other, lesser, equal, or a combination of those.
      a. Less than(<) :  This operator checks if the value on the left of the operator is lesser than the one on the 
                         right.
      b. Greater than(>) : It checks if the value on the left of the operator is greater than the one on the right.
      c. Less than or equal to(<=) : It checks if the value on the left of the operator is lesser than or equal to 
                                     the one on the right.
      d. Greater than or equal to(>=) : It checks if the value on the left of the operator is greater than or equal to
                                        the one on the right.
      e. Equal to(==) : This operator checks if the value on the left of the operator is equal to the one on the right.
      f. Not equal to(!=) : It checks if the value on the left of the operator is not equal to the one on the right.
    
    - Assignment operator : Python assignment operator assigns a value to a variable. It may manipulate the value by a
                            factor before assigning it.
      a. Assign(=) : Assigns a value to the expression on the left. Notice that == is used for comparing, 
                     but = is used for assigning.
      b. Add and Assign(+=) : Adds the values on either side and assigns it to the expression on the left.
                              a+=10 is the same as a=a+10.
      c. Subtract and Assign(-=) : Subtracts the value on the right from the value on the left.
                                   Then it assigns it to the expression on the left.
      d. Divide and Assign(/=) : Divides the value on the left by the one on the right. Then it assigns it to the
                                 expression on the left.
      e. Multiply and Assign(*=) : Multiplies the values on either sides. Then it assigns it to the expression on 
                                   the left.
      f. Modulus and Assign(%=) : Performs modulus on the values on either side. Then it assigns it to the expression
                                  on the left.
      g. Exponent and Assign(**=) : Performs exponentiation on the values on either side. Then assigns it to the
                                    expression on the left.
      h. Floor-Divide and Assign(//=) : Performs floor-division on the values on either side. Then assigns it to the
                                        expression on the left.
    
    - Logical operator : These are conjunctions that you can use to combine more than one condition.
     
      a. and Operator : If the conditions on both sides of the operator are true, then the expression as a whole is true.
      b. or Operator : The expression is false only if both the statements around the operator are false. Otherwise,
                      it is true.
      c. not Operator : This inverts the Boolean value of an expression. It converts True to False, and False to True.
     
    - Membership operator : These operators test whether a value is a member of a sequence. The sequence may be a list,
                            a string, or a tuple.
                            We have two membership python operators- ‘in’ and ‘not in’.
      a. in Operator : This checks if a value is a member of a sequence.
      b. b. not in Operator : Unlike ‘in’, ‘not in’ checks if a value is not a member of a sequence.
     
    - Identity operator : These operators test if the two operands share an identity. 
                          We have two identity operators- ‘is’ and ‘is not’.
      a. is operator : If two operands have the same identity, it returns True. Otherwise, it returns False.
      b. is not operator : 
    
    - Bitwise operator : On the operands, these operate bit by bit.
      a. Binary AND(&) Operator : It performs bit by bit AND operation on the two values. 
      b. Binary OR(|) : It performs bit by bit OR on the two values.
      c. Binary XOR(^) Operator : It performs bit by bit XOR(exclusive-OR) on the two values.
      d. Binary One’s Complement(~) : It returns the one’s complement of a number’s binary. It flips the bits.
      e. Binary Left-Shift(<<) Operator : It shifts the value of the left operand the number of places to the left 
                                         that the right operand specifies.
      f. f. Binary Right-Shift(>>) : It shifts the value of the left operand the number of places to the right that 
                                    the right operand specifies.
     
2. == vs is
Ans:
     == : is for value equality. It's used to know if two objects have the same value.
     is : is for reference equality. It's used to know if two references refer (or point) to the same object,
          i.e if they're identical. Two objects are identical if they have the same memory address. 
          
    ---->  == determines if the values of two objects are equal, while 
           is determines if they are the exact same object.
           
           Ex :
            >>> a = 1000
            >>> b = 1000
            >>> a == b
            True
            >>> a is b
            False
            
3. and or operators. Explain 2 examples 
Ans:
    - and operator : The and operator checks whether two conditions are both True simultaneously:
        a and b ----> It returns True if both conditions are True. And it returns False if either the condition
                      a or b is False.
        Ex-1 : 
        >>> price = 9.99
        >>> price > 9 and price < 10
        
        Output : True  ----> The result is True because the price is greater than 9 and less than 10.
        Ex-2 :
        >>> price = 9.99
        >>> price > 10 and price < 20
        
        Output : False ----> The condition price > 10 returns False while the second condition price < 20 returns True.
        
        Truth table :
          a	      b	   a and b
        True	True	True
        True	False	False
        False	False	False
        False	True	False
        
    - or operator : The or operator checks multiple conditions. But it returns True when either or both of individual
                    conditions are True:
        Ex-1 : 
        >>> price = 9.99
        >>> price > 10 or price < 20
        
        Output : True ----> The price < 20 returns True, therefore, the whole expression returns True.
        Ex-2 :
        >>> price = 9.99
        >>> price > 10 or price < 5
        Output : False ----> The following example returns False because both conditions evaluate to False.
        
        Truth table : 
          a      b	   a or b
        True	True	True
        True	False	True
        False	True	True
        False	False	False
        
        

4. Operator precedence.
Ans : 
    - Operators Precedence in Python : Below table has a lists of all operators from highest precedence
                                       to lowest precedence in
    
                     Operator                                                      Description
                        **                                              Exponentiation (raise to the power)
                        ~ + -                                           Ones complement, unary plus and minus.
                        * / % //                                        Multiply, divide, modulo and floor division.
                        + -                                             Addition and subtraction.
                        >> <<                                           Right and left bitwise shift.
                        &                                               Bitwise ‘AND’.
                        ^ |                                             Bitwise exclusive `OR’ and regular `OR’.
                        <= < > >=                                       Comparison operators.
                        <> == !=                                        Equality operators.
                        = %= /= //= -= += *= **=                        Assignment operators.
                        is, is not                                      Identity operators.
                        in, not in                                      Membership operators.
                        not, or, and                                    Logical operators

5. Subtract 2 numbers and print result program.
	- Write down all scenarios with different input values 
	•	a = 10						a = 2.32
        b = 20						b = 1.22
        print(a-b)					print(a-b)

    •	a = 2						a = 1+2k
        b = 3						b = 2+3k
        c = a-b						print(a-b)
        print(a-b)


V. DataTypes Intro:
====================
1. Importance of DataTypes.2
Ans : 
    - Data types are used to identify the type of data a memory location can hold and the associated operations
       of handling it. The data that we deal with in our programs can be of many types like character, integer, 
       real number, string, boolean, etc. hence programming languages including Python provide ways and facilities 
       to handle all these different types of data through data types. 
     - The data types define the capabilities to handle a specific type of data such as memory space it allocates to
       hold a certain type of data and the range of values supported for a given data type, etc.

2. Different data types, data structures available in Python
Ans : Data types available in python : 
    •	Data types means it can store the single elements and the data structures can store the different types of data/elements. The Built in datatypes are:
    •	None Type:- The None type datatypes can represents an object that does not contain any value. An empty object can represents “None Type”.
    •	Numeric Data types:- The Numeric types represent numbers. These are 3types. They are:
            int:- It contains whole numbers.
            Float:- It contains decimal numbers.
            Complex:- It contains real numbers and Imaginary numbers.
    •	Boolean Data type:- The Boolean datatype can represents the True or False value.
    •	Mapping:- The Mapping data type is nothing but Dictionary. The Dictionary contains the pair of keys and values. The keyword is dict() and the keys and values are separated by ( : ) Colons. And the keys are immutable and the values are mutable. Hence the Dictionary data type is mutable.
    •	Set:- Set is a unordered collection of elements. But set is unordered and not allows duplicates. These are two types. They are:
            Set Datatype
            Frozenset datatype
    •	Sequence:- It contains the group of elements or items. The sequences are 6types and they are:
            list:- List is a group of elements and it is mutable, ordered and allows duplicates. Comparing with tuple it consumes more data and runs slowly.
        	tuple:- Tuple same like list. It is a group of elements, ordered but the difference is, it is not allowed duplicates and it is immutable. Comparing with the list it consumes less data and runs fast.
        	str:- It represents the group of characters. And it is immutable and denoted by (“”). Double Quotes. And the string type of data is immutable.
        	bytes:- It represents the group of numbers like arrays.
        	bytearray:- It is similar to byte type data types. The difference between the two byte and byte array is, bytes type cannot modified but the bytearray types can modified.
        	Range:- The range datatypes are represents sequence of numbers. The numbers in the range are not modifiable. Generally the range is used to repeating.

     - 
3. int vs float
Ans : 
    •	int:- The Integer numbers is one of the Numeric type data type. And the integer numbers can contains whole numbers of all positive and negative numbers.
    Ex: 	x = 10
	    y = -2
	    print(x)
	    print(y)
    •	float:- It float numbers is one of the Numeric type of data type. is one of the float can contains decimal numbers.
    Ex:	x = 10.5
	    print(x)

4. Boolean. give all scenarios.
    •	Boolean represent True or False. If we write any program like comparison type, the output will be returned 
        True or False. 

5. 0 vs null
Ans : 
        In other programming languages null is often defined to be 0, but in Python used None to define null objects 
        and variables. But None is not defined to be 0 or any other value.

6. Explain each data type, data structure with real life examples.
7. CRUD Operations.Give examples for each 
    •	x = 120 (Create Operation).
    •	Print(x) (Retrieve/Read Operation)
    •	x = 40 (Update Operation)
    •	del(x) (Delete Operation)

8. Sequences. Types of sequences. Sequence operations
    •	Sequence:- It contains the group of elements or items. The sequences are 6types and they are:
                	list:- List is a group of elements and it is mutable, ordered and allows duplicates. 
                	       Comparing with tuple it consumes more data and runs slowly.
                	tuple:-Tuple same like list. It is a group of elements, ordered but the difference is, it is 
                	       not allowed duplicates and it is immutable. Comparing with the list it consumes less data
                	       and runs fast.
                	str:- It represents the group of characters. And it is immutable and denoted by (“”). Double Quotes.
                	       And the string type of data is immutable.
                	bytes:- It represents the group of numbers like arrays.
                	bytearray:- It is similar to byte type data types. The difference between the two byte and 
                	        byte array is, bytes type cannot modified but the bytearray types can modified.
                	Range:- The range datatypes are represents sequence of numbers. The numbers in the range are not
                	        modifiable. Generally the range is used to repeating.

9. Explain about below functions and give examples 
	print()
 	id()
	type()
	int()
	float()
	complex()
	bool()	
	input()
	===============
	•	print() – It gives the specific output to the user.
    •	id() – It defined to find the address of the variable.
    •	type() – It defined to find the type of variable.
    •	int() – It is a numeric data type and it represents the integer type of variable.
    •	float() – It is a numeric data type and it represents the float type(decimal) of variable.
    •	complex() – It is a numeric data type and it represents the real and imaginary numbers.
    •	bool() - Boolean represent True or False. If we write any program like comparison type, the output will be 
                 returned True or False.
    •	input() – It is used to take output from the user when we are write a user defined function, it can be used.

	
VI. Keyword:
=====================
1. Explain all keywords with examples and areas of usage
•	The Python can contains some built-in keywords. In the latest version of there are 35 in built keywords are there. In that (3) keywords are starts from capital letters and the remaining 32 are starts from small letters. And they are:
•	True, False, None, and, or, not, for, while, break, continue, pass, if , else, elif, is, as, in, class, try, except, finally, del, raise, with, return, global, global, non-local, assert, async and await, def, import, yield.
        Keyword	    Description
        and		    A logical operator
        as		    To create an alias
        assert		For debugging
        break		To break out of a loop
        class		To define a class
        continue	To continue to the next iteration of a loop
        def		    To define a function
        del		    To delete an object
        elif		Used in conditional statements, same as else if
        else		Used in conditional statements
        except		Used with exceptions, what to do when an exception occurs
        False		Boolean value, result of comparison operations
        finally	    Used with exceptions, a block of code that will be executed no matter if there is an exception or not
        for		    To create a for loop
        from		To import specific parts of a module
        global		To declare a global variable
        if		    To make a conditional statement
        import		To import a module
        in		    To check if a value is present in a list, tuple, etc.
        is		    To test if two variables are equal
        lambda		To create an anonymous function
        None		Represents a null value
        nonlocal	To declare a non-local variable
        not		    A logical operator
        or		    A logical operator
        pass		A null statement, a statement that will do nothing
        raise		To raise an exception
        return		To exit a function and return a value
        True		Boolean value, result of comparison operations
        try		    To make a try...except statement
        while		To create a while loop
        with		Used to simplify exception handl ing
        yield		To end a function, returns a generator




